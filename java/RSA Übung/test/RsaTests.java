import java.math.BigInteger;

import org.junit.Assert;
import org.junit.Test;

import rsa.PrivateKey;
import rsa.PublicKey;
/**
 * JUnit Testklasse zum testen der Funktionalitaet der Public und PrivateKey Methoden
 *
 * @author Daniel Pigotow
 *
 */
public class RsaTests {

    // http://doctrina.org/How-RSA-Works-With-Examples.html

    public static final BigInteger p = new BigInteger(
            "12131072439211271897323671531612440428472427633701410925634549312301964373042085619324197365322416866541017057361365214171711713797974299334871062829803541");
    public static final BigInteger q = new BigInteger(
            "12027524255478748885956220793734512128733387803682075433653899983955179850988797899869146900809131611153346817050832096022160146366346391812470987105415233");
    public static final BigInteger n = new BigInteger(
            "145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889672472407926969987100581290103199317858753663710862357656510507883714297115637342788911463535102712032765166518411726859837988672111837205085526346618740053");
    public static final BigInteger phi = new BigInteger(
            "145906768007583323230186939349070635292401872375357164399581871019873438799005358938369571402670149802121818086292467422828157022922076746906543401224889648313811232279966317301397777852365301547848273478871297222058587457152891606459269718119268971163555070802643999529549644116811947516513938184296683521280");
    public static final BigInteger e = new BigInteger("65537");
    public static final BigInteger d = new BigInteger(
            "89489425009274444368228545921773093919669586065884257445497854456487674839629818390934941973262879616797970608917283679875499331574161113854088813275488110588247193077582527278437906504015680623423550067240042466665654232383502922215493623289472138866445818789127946123407807725702626644091036502372545139713");
    public static final BigInteger m = new BigInteger("1976620216402300889624482718775150");
    public static final BigInteger c = new BigInteger(
            "35052111338673026690212423937053328511880760811579981620642802346685810623109850235943049080973386241113784040794704193978215378499765413083646438784740952306932534945195080183861574225226218879827232453912820596886440377536082465681750074417459151485407445862511023472235560823053497791518928820272257787786");

    public static BigInteger BI(long l) {
        return BigInteger.valueOf(l);
    }

    @Test
    public void test_encrypt() {
        PublicKey key = new PublicKey(n, e);
        BigInteger actual = key.encrypt(m);
        Assert.assertEquals(c, actual);
    }

    @Test
    public void test_encrypt_and_decrypt() {
        PublicKey key = new PublicKey(n, e);
        PrivateKey privateKey = new PrivateKey(key, d);
        BigInteger actual = key.encrypt(m);
        BigInteger resultAfterDecription = privateKey.decrypt(actual);
        Assert.assertEquals(m, resultAfterDecription);
    }

    @Test
    public void test_encrypt_byte_arr() {
        byte[] message = ExampleTests.stringToBytes("Hallo");
        PublicKey key = new PublicKey(n, e);
        // Per Hand berechnete Werte des message Arrays um diese zu vergleichen
        BigInteger[] actual = { new BigInteger(
                "89099376276670154673813351657770216591226548784922617389063992687961677879286904472654914665252712593670995308775720175105492987192806401738938446719261400026146079968570450784838039569508087056009767970685124041015410031571593089145147854828140728141780636789664998553434019344425550326225939797501873193015"),
                new BigInteger(
                        "84678702049964035127896877368302320193886098455768332363432424605514741777549598765352488664406159741902969536313365615807705807342321003104495852655512915130050188765284239466210113597760303699022312173073258712597100702393539916597625283858275741383340518666315900387591781569580279341955960362957888697189"),
                new BigInteger(
                        "24967305915147448501714803815131082697651323959012327163948924800842151459753928809004140779720650895584635121993194057082316592998717502814441305726429929671294365807644588277045222305190426743608262305501915288920161172031572236684644966814452620598419243254600230442500564630612310314865158125155993279156"),
                new BigInteger(
                        "24967305915147448501714803815131082697651323959012327163948924800842151459753928809004140779720650895584635121993194057082316592998717502814441305726429929671294365807644588277045222305190426743608262305501915288920161172031572236684644966814452620598419243254600230442500564630612310314865158125155993279156"),
                new BigInteger(
                        "38842157875943079188185445304579668744732765285296229312069079189604026634975232902567591019360806090163616843896933954511057774277012101804314476185295849622146563538202579085309181093715566609433861522817268155952508279805952520521294438960392472508617643577732121234835368685304804224698356904865781567168") };
        BigInteger[] encripted = key.encrypt(message);

        for (int i = 0; i < encripted.length; i++) {
            Assert.assertEquals(actual[i], encripted[i]);
        }
    }

    @Test
    public void test_encrypt_and_decript_byte_arr() {
        byte[] message = ExampleTests.stringToBytes("Hallo");
        PrivateKey privateKey = new PrivateKey(BI(50021), BI(100003), BI(65537));

        BigInteger[] encripted = privateKey.getPublicKey().encrypt(message);

        byte[] decriptedArr = privateKey.decrypt(encripted);

        System.out.print(ExampleTests.bytesToString(decriptedArr));
        Assert.assertEquals(ExampleTests.bytesToString(decriptedArr), "Hallo");
    }
}


